import { DataProvider, HttpError } from "@refinedev/core";
import axios from "axios";
import { stringify } from "query-string";

// Error handling with axios interceptors
const axiosInstance = axios.create();

axiosInstance.interceptors.response.use(
  (response) => {
    return response;
  },
  (error) => {
    const customError: HttpError = {
      ...error,
      message: error.response?.data?.message,
      statusCode: error.response?.status,
    };

    return Promise.reject(customError);
  }
);

const mapOperator = (operator: CrudOperators): string => {
    switch (operator) {
        case "ne":
        case "gte":
        case "lte":
            return `_${operator}`;
        case "contains":
            return "_like";
        case "eq":
        default:
            return "";
    }
};

export const dataProvider = (apiUrl: string): DataProvider => ({
  // Methods

  const generateFilters = (filters?: CrudFilters) => {
    const queryFilters: { [key: string]: string } = {};

    filters?.map((filter): void => {
    if ("field" in filter) {
        const { field, operator, value } = filter;
        const mappedOperator = mapOperator(operator);
        queryFilters[`${field}${mappedOperator}`] = value;
    }
    });

    return queryFilters;
},

getList: async ({ resource, pagination, sorters, filters }) => {
    const url = `${apiUrl}/${resource}`;

    const { current = 1, pageSize = 10 } = pagination ?? {};

    const query: {
    _start?: number;
    _end?: number;
    _sort?: string;
    _order?: string;
    } = {
    _start: (current - 1) * pageSize,
    _end: current * pageSize,
    };

    if (sorters && sorters.length > 0) {
    query._sort = sorters[0].field;
    query._order = sorters[0].order;
    }

    const queryFilters = generateFilters(filters);

    const { data, headers } = await axiosInstance.get(
    `${url}?${stringify(query)}&${stringify(queryFilters)}`
    );

    const total = +headers["x-total-count"];

    return {
    data,
    total,
    };
},
});
